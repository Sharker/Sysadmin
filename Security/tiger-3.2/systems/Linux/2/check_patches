#!/bin/sh
#
#     tiger - A UN*X security checking system
#     Copyright (C) 1993 Douglas Lee Schales, David K. Hess, David R. Safford
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2, or (at your option)
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#     Please see the file `COPYING' for the complete copyright notice.
#
# check_patches: uses autorpm or apt-get to verify if software is up-to-date
# 10.26.2001
# Paul Telford <paul_telford@hp.com>
#
# 07/25/2002 jfs Fixed so it suggests that there might be errors if running
#                as a non-root user.
#                Changed TigerInstallDir to .
# 04/15/2003 jfs Added some TODOS
#
#-----------------------------------------------------------------------------
# TODO:
#
# - If APT is not configured for timeouts (see apt.conf(5)) Tiger might get
#   stalled when running this check.
#
#-----------------------------------------------------------------------------
#
TigerInstallDir='.'

#
# Set default base directory.
# Order or preference:
#      -B option
#      TIGERHOMEDIR environment variable
#      TigerInstallDir installed location
#
basedir=${TIGERHOMEDIR:=$TigerInstallDir}

for parm
do
   case $parm in
   -B) basedir=$2; break;;
   esac
done
#
# Verify that a config file exists there, and if it does
# source it.
#
[ ! -r $basedir/config ] && {
  echo "--ERROR-- [init002e] No 'config' file in \`$basedir'."
  exit 1
}
. $basedir/config

. $BASEDIR/initdefs
#
# If run in test mode (-t) this will verify that all required
# elements are set.
#
[ "$Tiger_TESTMODE" = 'Y' ] && {
  haveallcmds AWK CAT COMM GEN_INETD_SETS GEN_SERVICES_SETS GREP JOIN LS RM SORT TAIL UNIQ || exit 1
  havelallcmds APT || haveallcmds AUTORPM || exit 1
  haveallfiles BASEDIR WORKDIR || exit 1
  
  echo "--CONFIG-- [init003c] $0: Configuration ok..."
  exit 0
}
#------------------------------------------------------------------------
echo
echo "# Checking for up-to-date patches..."

haveallcmds AWK CAT COMM GEN_INETD_SETS GEN_SERVICES_SETS GREP JOIN || exit 1
haveallcmds LS RM SORT TAIL UNIQ  || exit 1
# TODO: How can we check fo one command *or* other ?? (jfs)
#havelallcmds APT || haveallcmds AUTORPM || exit 1
haveallfiles BASEDIR WORKDIR || exit 1


if [ -n "$AUTORPM" -a -x "$AUTORPM" ]
then
	tmplog="$WORKDIR/autorpm.out.tmp.$$"
       	$AUTORPM --print | $GREP "is an updated RPM and could be upgraded" |\
		awk '{print $1}' > $tmplog

	if [ -s $tmplog ]
	then
		message FAIL ptch01 "" "Following packages not up to date:"
		while read filename
		do
			echo "		$filename"
		done < $tmplog
		delete $tmplog
	fi


elif [ -n "$APT" -a -x "$APT" ]
then
	tmplog="$WORKDIR/apt-get.out.tmp.$$"
	[ "$UID" -gt 0  ] && message WARN ptch05e "" "This script is not running as super-user, it will probably be unable to update the package database from it's sources."

       	$APT update 1> /dev/null
       	$APT -s upgrade | $GREP "^Inst" | awk '{print $2}' > $tmplog
	if [ -s $tmplog ]
	then
               	message FAIL ptch02 "" "apt-get reports following packages not up to date:"    
		while read filename
		do
			echo "		$filename"
		done < $tmplog
		delete $tmplog
       	fi
else
	message WARN ptch04 "" "Can't find patch management tool."
fi

