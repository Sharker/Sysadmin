#!/bin/sh
#
#     tiger - A UN*X security checking system
#     Copyright (C) 1993 Douglas Lee Schales, David K. Hess, David R. Safford
#
#    This program is free software; you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation; either version 2, or (at your option)
#    any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#     Please see the file `COPYING' for the complete copyright notice.
#
# check_release: verifies that system meets minimum release requirements
# 10.26.2001
# Paul Telford <paul_telford@hp.com>
# 07/25/2002 jfs       Changed TigerInstallDir to .
#
#-----------------------------------------------------------------------------
#
TigerInstallDir='.'

#
# Set default base directory.
# Order or preference:
#      -B option
#      TIGERHOMEDIR environment variable
#      TigerInstallDir installed location
#
basedir=${TIGERHOMEDIR:=$TigerInstallDir}

for parm
do
   case $parm in
   -B) basedir=$2; break;;
   esac
done
#
# Verify that a config file exists there, and if it does
# source it.
#
[ ! -r $basedir/config ] && {
  echo "--ERROR-- [init002e] No 'config' file in \`$basedir'."
  exit 1
}
. $basedir/config

. $BASEDIR/initdefs
#
# If run in test mode (-t) this will verify that all required
# elements are set.
#
[ "$Tiger_TESTMODE" = 'Y' ] && {
  haveallcmds AWK CAT CUT GEN_INETD_SETS GEN_SERVICES_SETS GREP JOIN LS RM SORT TAIL UNIQ || exit 1
  haveallfiles BASEDIR WORKDIR || exit 1
  
  echo "--CONFIG-- [init003c] $0: Configuration ok..."
  exit 0
}
#------------------------------------------------------------------------

echo
echo "# Checking OS release..."
haveallcmds AWK CAT CUT GREP JOIN LS RM SORT TAIL UNIQ || exit 1
haveallfiles BASEDIR WORKDIR || exit 1

if [ -e /etc/redhat-release ]
then
        REDHAT_VERSION=`$CUT -f5 -d' ' /etc/redhat-release`
        typeset -i MAJOR=`echo $REDHAT_VERSION | $CUT -d. -f1`
        typeset -i MINOR=`echo $REDHAT_VERSION | $CUT -d. -f2`
        if [ $MAJOR -lt 6 ]
        then
                message FAIL osv001 "" "Out of date Redhat Linux version $REDHAT_VERSION"
        
        elif [ $MAJOR -eq 6 -a $MINOR -lt 2 ]
        then
                message FAIL osv001 "" "Out of date Redhat Linux version $REDHAT_VERSION"
                return
        fi

# Debian seems to put either a number or a codename in their
# version file so we have to check for both.
elif [ -e /etc/debian_version ]
then
	# these are the codenames for the older debian releases
	# if we see any of them we know we fail right away
        DEBIAN_VERSION=`$CUT -f1 -d' ' /etc/debian_version`
        $GREP -E "hamm|bo|rex|buzz" /etc/debian_version 2> /dev/null
        if [ $? -eq 0 ]
        then
                message FAIL osv002 "" "Out of date Debian GNU/Linux version"
        else
            $CUT -f1 -d' ' /etc/debian_version | $GREP -E "[A-Za-z]" 1> /dev/null
            if [ $? -eq 1 ]
            then
                typeset -i MAJOR=`echo $DEBIAN_VERSION | $CUT -d \. -f 1`
                typeset -i MINOR=`echo $DEBIAN_VERSION | $CUT -d \. -f 2`
                if [ "$MAJOR" -lt 2 ]
                then
                        message osv002 "" "Out of date Debian GNU/Linux version \`$DEBIAN_VERSION'"
                elif [ "$MAJOR" -eq 2 -a "$MINOR" -lt 1 ]
                then
                        message osv002 "" "Out of date Debian GNU/Linux version \`$DEBIAN_VERSION'"
                fi
            else
                        message osv004 "" "Unreleased Debian GNU/Linux version \`$DEBIAN_VERSION'"
	     fi
	    
        fi
else
        message WARN osv003 "" "This check only works for Redhat and Debian"
fi
 
